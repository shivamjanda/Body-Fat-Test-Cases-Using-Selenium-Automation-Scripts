# ------------------------------------------------------------------------------------------------------------------------------------
# Name: Shivam Janda
# Date: November 202, 2022
# Program: SYSA-3204
# Description: Test cases exported from Selenium ide.
# ------------------------------------------------------------------------------------------------------------------------------------
# Generated by Selenium IDE
import unittest

import time
import json
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService  # added
from webdriver_manager.chrome import ChromeDriverManager  # added
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))  # added

class TestUntitled(unittest.TestCase):
  def setup_method(self, method):
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_untitled(self):
    self.vars = {}  # added
    # Test name: Untitled
    # Step # | name | target | value
    # 1 | open | https://www.calculator.net/body-fat-calculator.html | 
    driver.get("https://www.calculator.net/body-fat-calculator.html")
    # 2 | setWindowSize | 1918x1030 | 
    driver.set_window_size(1918, 1030)
    # 3 | click | css=.cbcontainer:nth-child(2) > .rbmark | 
    driver.find_element(By.CSS_SELECTOR, ".cbcontainer:nth-child(2) > .rbmark").click()
    # 4 | storeValue | id=csex2 | varGender
    self.vars["varGender"] = driver.find_element(By.ID, "csex2").get_attribute("value")
    # 5 | doubleClick | name=cage | 
    element = driver.find_element(By.NAME, "cage")
    actions = ActionChains(driver)
    actions.double_click(element).perform()
    # 6 | type | name=cage | 40
    driver.find_element(By.NAME, "cage").send_keys("40")
    # 7 | doubleClick | name=cweightkgs | 
    element = driver.find_element(By.NAME, "cweightkgs")
    actions = ActionChains(driver)
    actions.double_click(element).perform()
    # 8 | type | name=cweightkgs | 100
    driver.find_element(By.NAME, "cweightkgs").send_keys("100")
    # 9 | doubleClick | id=cheightmeter | 
    element = driver.find_element(By.ID, "cheightmeter")
    actions = ActionChains(driver)
    actions.double_click(element).perform()
    # 10 | type | id=cheightmeter | 189
    driver.find_element(By.ID, "cheightmeter").send_keys("189")
    # 11 | doubleClick | id=cneckmeter | 
    element = driver.find_element(By.ID, "cneckmeter")
    actions = ActionChains(driver)
    actions.double_click(element).perform()
    # 12 | type | id=cneckmeter | 57
    driver.find_element(By.ID, "cneckmeter").send_keys("57")
    # 13 | doubleClick | id=cwaistmeter | 
    element = driver.find_element(By.ID, "cwaistmeter")
    actions = ActionChains(driver)
    actions.double_click(element).perform()
    # 14 | type | id=cwaistmeter | 98
    driver.find_element(By.ID, "cwaistmeter").send_keys("98")
    # 15 | doubleClick | id=chipmeter | 
    element = driver.find_element(By.ID, "chipmeter")
    actions = ActionChains(driver)
    actions.double_click(element).perform()
    # 16 | type | id=chipmeter | 100
    driver.find_element(By.ID, "chipmeter").send_keys("100")
    # 17 | click | css=table:nth-child(4) input | 
    driver.find_element(By.CSS_SELECTOR, "table:nth-child(4) input").click()
    # 18 | assertText | css=font > b | Body Fat: 23.0%
    assert driver.find_element(By.CSS_SELECTOR, "font > b").text == "Body Fat: 23.0%"
    # 19 | click | css=.cbcontainer:nth-child(1) > .rbmark | 
    driver.find_element(By.CSS_SELECTOR, ".cbcontainer:nth-child(1) > .rbmark").click()
    # 20 | storeValue | id=csex1 | varGender
    self.vars["varGender"] = driver.find_element(By.ID, "csex1").get_attribute("value")
    # 21 | doubleClick | name=cage | 
    element = driver.find_element(By.NAME, "cage")
    actions = ActionChains(driver)
    actions.double_click(element).perform()
    # 22 | type | name=cage | 15
    driver.find_element(By.NAME, "cage").send_keys("15")
    # 23 | doubleClick | name=cweightkgs | 
    element = driver.find_element(By.NAME, "cweightkgs")
    actions = ActionChains(driver)
    actions.double_click(element).perform()
    # 24 | type | name=cweightkgs | 220
    driver.find_element(By.NAME, "cweightkgs").send_keys("220")
    # 25 | doubleClick | id=cheightmeter | 
    element = driver.find_element(By.ID, "cheightmeter")
    actions = ActionChains(driver)
    actions.double_click(element).perform()
    # 26 | type | id=cheightmeter | 90
    driver.find_element(By.ID, "cheightmeter").send_keys("90")
    # 27 | doubleClick | id=cneckmeter | 
    element = driver.find_element(By.ID, "cneckmeter")
    actions = ActionChains(driver)
    actions.double_click(element).perform()
    # 28 | type | id=cneckmeter | 18
    driver.find_element(By.ID, "cneckmeter").send_keys("18")
    # 29 | doubleClick | id=cwaistmeter | 
    element = driver.find_element(By.ID, "cwaistmeter")
    actions = ActionChains(driver)
    actions.double_click(element).perform()
    # 30 | type | id=cwaistmeter | 100
    driver.find_element(By.ID, "cwaistmeter").send_keys("100")
    # 31 | click | css=table:nth-child(4) input | 
    driver.find_element(By.CSS_SELECTOR, "table:nth-child(4) input").click()
    # 32 | click | css=table:nth-child(4) input | 
    driver.find_element(By.CSS_SELECTOR, "table:nth-child(4) input").click()
    # 33 | assertText | css=font > b | Body Fat: 60.7%
    assert driver.find_element(By.CSS_SELECTOR, "font > b").text == "Body Fat: 60.7%"
    # 34 | echo | Female Body: 23.0% | 
    print("Female Body: 23.0%")
    # 35 | echo | Male Body: 60.7% | 
    print("Male Body: 60.7%")
  
